diff --git a/compiler.mjs b/compiler.mjs
index fdd3597a744e41e05ab9b3ed64b69a0dd0962f80..ca3ad011994f5fe1278eff191f92d233b64d4c89 100644
--- a/compiler.mjs
+++ b/compiler.mjs
@@ -47414,9 +47414,6 @@ function process_component_options(component, nodes) {
                         if (tag && !regex_valid_tag_name.test(tag)) {
                             return component.error(attribute, compiler_errors.invalid_tag_property);
                         }
-                        if (tag && !component.compile_options.customElement) {
-                            component.warn(attribute, compiler_warnings.missing_custom_element_compile_options);
-                        }
                         component_options.tag = tag;
                         break;
                     }
diff --git a/internal/index.mjs b/internal/index.mjs
index 97139811ed69efe6a8e2deb6618f1e31dde4f0f7..f63d79ebcd6e5b36a09edcda63d419413c0e79ea 100644
--- a/internal/index.mjs
+++ b/internal/index.mjs
@@ -760,43 +760,9 @@ function is_crossorigin() {
     return crossorigin;
 }
 function add_resize_listener(node, fn) {
-    const computed_style = getComputedStyle(node);
-    if (computed_style.position === 'static') {
-        node.style.position = 'relative';
-    }
-    const iframe = element('iframe');
-    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
-        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
-    iframe.setAttribute('aria-hidden', 'true');
-    iframe.tabIndex = -1;
-    const crossorigin = is_crossorigin();
-    let unsubscribe;
-    if (crossorigin) {
-        iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
-        unsubscribe = listen(window, 'message', (event) => {
-            if (event.source === iframe.contentWindow)
-                fn();
-        });
-    }
-    else {
-        iframe.src = 'about:blank';
-        iframe.onload = () => {
-            unsubscribe = listen(iframe.contentWindow, 'resize', fn);
-            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)
-            // see https://github.com/sveltejs/svelte/issues/4233
-            fn();
-        };
-    }
-    append(node, iframe);
-    return () => {
-        if (crossorigin) {
-            unsubscribe();
-        }
-        else if (unsubscribe && iframe.contentWindow) {
-            unsubscribe();
-        }
-        detach(iframe);
-    };
+    const ro = new ResizeObserver(fn);
+    ro.observe(node);
+    return () => ro.disconnect();
 }
 function toggle_class(element, name, toggle) {
     element.classList[toggle ? 'add' : 'remove'](name);